import group_theory.group_action.basic
import tactic
import data.setoid.partition

variables {G : Type*} [group G] {S : Type} {s t u : S} [mul_action G S]

open mul_action

theorem mem_orbit_refl (s : S) : s ‚àà orbit G s :=
begin
  -- we could use `1 : G` but this is already in the library under another name
  exact mem_orbit_self s,
end

theorem mem_orbit_symm (h : s ‚àà orbit G t) : t ‚àà orbit G s :=
begin
  rw mem_orbit_iff at *,
  -- h says ‚àÉ x, x ‚Ä¢ t = s so let's let `a` be that `x` and 
  -- then replace `s` by `a ‚Ä¢ t` everywhere (that's the `rfl`)
  rcases h with ‚ü®a, rfl‚ü©,
  -- By the maths proof, we use a‚Åª¬π
  use a‚Åª¬π,
  -- now the simplifier can solve this equality
  simp,
end

theorem mem_orbit_trans (hst : s ‚àà orbit G t) (htu : t ‚àà orbit G u) :
  s ‚àà orbit G u :=
begin
  rw mem_orbit_iff at *,
  -- we know a ‚Ä¢ t = s and b ‚Ä¢ u = t
  rcases hst with ‚ü®a, rfl‚ü©,
  rcases htu with ‚ü®b, rfl‚ü©,
  -- so we have to solve `‚àÉ x, x ‚Ä¢ u = a ‚Ä¢ b ‚Ä¢ u` 
  use a * b,
  exact mul_smul a b u, -- I know the axiom name
end

open set

variable (G)

theorem orbit_nonempty (s : S) : set.nonempty (orbit G s) :=
begin
  rw nonempty_def,
  -- the orbit is nonempty because it contains s
  use s,
  -- and here's the proof that s is in its own orbit
  exact mem_orbit_refl s,
end

variable {G}
theorem mem_orbit (s : S) : ‚àÉ (t : S), s ‚àà orbit G t :=
begin
  -- we can use t = s
  use s,
  -- and here's the proof that s is in its own orbit
  exact mem_orbit_refl s,
end

variable {a : S}

theorem boring_lemma (has : a ‚àà orbit G s) (hat : a ‚àà orbit G t) : s ‚àà orbit G t :=
begin
  -- this is a little logic puzzle. Note that my proof is backwards
  refine mem_orbit_trans _ hat,
  exact mem_orbit_symm has,
end

theorem orbit_subset_of_mem_orbit (hst : s ‚àà orbit G t) : orbit G s ‚äÜ orbit G t :=
begin
  rintros u hu,
  exact mem_orbit_trans hu hst,
end

theorem orbit_eq_orbit_of_mem_inter (has : a ‚àà orbit G s) (hat : a ‚àà orbit G t) :
  orbit G s = orbit G t :=
begin
  -- ‚äÜ is antisymmetric
  apply subset.antisymm,
  { -- both cases follow from the boring lemma and `orbit_subset_of_mem_orbit`
    apply orbit_subset_of_mem_orbit,
    exact boring_lemma has hat, },
  { apply orbit_subset_of_mem_orbit,
    exact boring_lemma hat has, }
end

variable {g : G}

open setoid

-- this is harder and can probably be golfed.
example : is_partition {ùí™ : set S | ‚àÉ s, orbit G s = ùí™} :=
begin
  refine ‚ü®_, _‚ü©,
  { rintro ‚ü®s, hs‚ü©,
    exact not_nonempty_iff_eq_empty.mpr hs (orbit_nonempty G s), },
  intro s,
  refine exists_unique_of_exists_of_unique _ _,
  { use orbit G s,
    simp },
  { rintro A B ‚ü®‚ü®t, rfl‚ü©, hst, -‚ü© ‚ü®‚ü®u, rfl‚ü©, hsu, -‚ü©,
    exact orbit_eq_orbit_of_mem_inter hst hsu, },
end
